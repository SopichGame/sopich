// const balloonsym123 = `

//  ......22 22......   
//  ....2212 1122....   
//  ...21112 11112...   
//  ..211121 111112..   
//  ..211121 111112..   
//  ..211121 111112..   
//  ...21112 11112...   
//  ....2222 2222....   
//  .....2.. ..2.....   
//  ......2. .2......   
//  ......2. .2......   
//  ......2. .2......  
//  .....2.1 112.....  
//  .....2.1 1.2.....   
//  .....222 222.....   
//  .....222 222.....   
// `
// const balloonsym13= `
//  ......22 22......   
//  ....2212 1122....   
//  ...21112 11112...   
//  ..211121 111112..   
//  ..211121 111112..   
//  .2111121 1111112.   
//  .2111121 1111112.   
//  .2111121 1111112.   
//  .2111121 1111112.   
//  ..211121 111112..   
//  ..211121 111112..   
//  ...21112 11112...   
//  ....2222 2222....   
//  .....2.. ..2.....   
//  ......2. .2......   
//  ......2. .2......  
// `
// const balloonsym124 = `
//  ......22 22......   
//  ....2212 1222....   
//  ...21121 11122...   
//  ..211211 111112..   
//  ..211211 111112..   
//  .2112111 1111112.   
//  .2112111 1111112.   
//  .2112111 1111112.   
//  .2112111 1111112.   
//  ..212111 111112..   
//  ..211211 111112..   
//  ...21211 11112...   
//  ....2222 2222....   
//  .....2.. ..2.....   
//  ......2. .2......   
//  ......2. .2......  
// `

export const balloonsym12 = [
    `
 ......11 21......   
 ....1111 1211....   
 ...11111 11211...   
 ..111111 111211..   
 ..111111 111211..   
 .1111111 1111211.   
 .1111111 1111211.   
 .1111111 1111211.   
 .1111111 1111211.   
 .1111111 1111211.   
 .1111111 1111211.   
 ..111111 111211..   
 ..111111 111211..   
 ...11111 11211...   
 ....1111 1111....   
 ....22.. ..22....  
`,  
    `
 ......11 21......   
 ....1111 1211....   
 ...11111 11211...   
 ..111111 111211..   
 ..111111 111211..   
 .1111111 1111211.   
 .1111111 1111211.   
 ..111111 111121..   
 .1111111 1111211.   
 .1111111 1111211.   
 .1111111 1111211.   
 ..111111 111211..   
 ..111111 111211..   
 ...11111 11211...   
 ....1111 1111....   
 ....22.. ..22....  
`,`
......1121......
....11111211....
....1111111211..
..111111111211..
...1111111121...
..1111111111211.
..111111111112..
..111111111121..
.11111111111211.
.11111111111211.
.1111111112.....
..1111111211....
..1111111211....
...1111111211...
....11111111....
....22....22....
`,`
......1121......
....11111211....
....1111111211..
..111111111211..
...1111111121...
..11.1111111211.
..111111111112..
..111111111121..
.11111111111211.
.11111111111211.
.1111111112.....
..1111111211....
..1111111211....
...1111111211...
....11111111....
..........22....
`,
`
......1121......
....11111211....
....1111111211..
..1111.11.2.11..
...111.111121...
..11.1111111211.
..1111111.1112..
..111.11111121..
.11..1111111211.
.11.11.11111211.
.111..11112.....
..11.111.211....
..111112..11....
...1111111211...
....11111.1.2...
...........2....
`,`
......11........
....111111......
....11111211....
..111.11.2.1....
...11.11121.....
...1.11111211...
...11111.112....
..11.1111121....
.11..11111211...
.11.11.1111211..
.111..112.......
..1.111.21......
..11112..1......
...11111211.....
....111.1.2.....
...........2....
`,`
.......1........
.....1111.......
.....111121.....
...111.112......
....11.1121.....
...1.1111211....
...1111.112.....
...1.111121.....
..1..1111211....
..1.11.111211...
..111.12........
...1111.21......
...1112.........
....111121......
.....11..2......
...........2....
`,`
................
................
................
....1111........
....111121......
...1111121.....
...11111112.....
...1.111121.....
.....111121.....
.....11112......
..111212........
...1111.........
...1112.........
....11..........
................
................
`,`
................
................
................
................
....11111.......
...1111121......
...111112.......
....1111........
.....1111.......
.....1111.......
................
................
................
................
................
................
`
]
export const basketsym12 = [`
 .....2.. ..2.....  
 .....2.. ..2.....  
 .....2.. ..2.....  
 .....2.. ..2.....  

 .....2.. ..2.....  
 .....2.. ..2.....  
 ....1111 1111.... 
 ....1111 1111.... 

 ....1222 2221.... 
 ....1111 1111.... 
 ....1222 2221.... 
 .....111 111..... 

 ........ ........  
 ........ ........  
 ........ ........  
 ........ ........  
`,`
 .....2.. ..2.....  
 .....2.. ..2.....  
 .....2.. .12.....  
 .....2.. .211....  

 .....2.. .111....  
 .....2.. .12.....  
 ....1111 1111.... 
 ....1111 1111.... 

 ....1222 2221.... 
 ....1111 1111.... 
 ....1222 2221.... 
 .....111 111..... 

 ........ ........  
 ........ ........  
 ........ ........  
 ........ ........  
`,`
 .....2.. ..2.....  
 .....2.. ..2.....  
 .....21. ..2.....  
 ....112. ..2.....  

 ....111. ..2.....  
 .....21. ..2.....  
 ....1111 1111.... 
 ....1111 1111.... 

 ....1222 2221.... 
 ....1111 1111.... 
 ....1222 2221.... 
 .....111 111..... 

 ........ ........  
 ........ ........ 
 ........ ........  
 ........ ........  
`,`
 .....2.. ..2.....  
 .....2.. ..2.....  
 .....2.2 2.2.....  
 .....211 112.....  

 .....211 112.....  
 .....2.1 1.2.....  
 ....1111 1111.... 
 ....1111 1111.... 

 ....1222 2221.... 
 ....1111 1111.... 
 ....1222 2221.... 
 .....111 111..... 

 ........ ........  
 ........ ........  
 ........ ........  
 ........ ........  
`]

/* 
 * bonuses
 */
const posmod = (x,m) => ( x + m * ( Math.floor( Math.abs( x ) / m ) + 1 ) ) % m
function stridef( stride ){
    return function( i, step ){
        const pos = posmod( i - step, stride.length )
        return stride[ pos ]
    }
}
function mkRotatingBonus( { pattern, w }, f, step ){
    return {
        w,
        pixel12 : pattern.map( i => {
            if ( i < 0 ) return 0
            const num = f( i,  step )
            return num
        })
    }
}
function mkRotatingBonusAnimation( template, stride, reverse ){
    const f = stridef( stride )
    return new Array( stride.length ).fill(0).map(
        (_,step) => mkRotatingBonus( template, f, (reverse?(-1):1) * step )
    )
}
function show( p12, w ){
    return p12.map( (i,idx) => {
        let str
        if ( i === 0 ) str = '. '
        else if ( i === 1 ) str = '* '
        else if ( i === 2 ) str = 'o '
        else {
            console.log( `template ${ JSON.stringify( p12 ) } has a problem at index ${ idx }` )
            str = '.'
        }
        if ( ( ( idx + 1) % w ) === 0 ) str += "\n"
        return str
    }).join('')

}

////
const scale = 2
const AnimatedBonusTemplates = {
    rotatingSquare8 : {
        w : 8 * scale,
        pattern : resize([
            -1,-1,-1,-1, -1,-1,-1,-1,
            -1,-1,-1,-1, -1,-1,-1,-1,
            -1,-1, 1, 0, 11,10,-1,-1,
            -1,-1, 2,-1, -1, 9,-1,-1,
            -1,-1, 3,-1, -1, 8,-1,-1,
            -1,-1, 4, 5,  6, 7,-1,-1,
            -1,-1,-1,-1, -1,-1,-1,-1,
            -1,-1,-1,-1, -1,-1,-1,-1,        
        ],8,scale)
    },
    rotatingCross8 : {
        w : 8 * scale,
        pattern : resize([
            -1,-1,-1,-1, -1,-1,-1,-1,
            -1,-1,-1,-1, -1,-1,-1,-1,
            -1,-1,-1, 0, 11,-1,-1,-1,
            -1,-1, 2, 1, 10, 9,-1,-1,
            -1,-1, 3, 4,  7, 8,-1,-1,
            -1,-1,-1, 5,  6,-1,-1,-1,
            -1,-1,-1,-1, -1,-1,-1,-1,
            -1,-1,-1,-1, -1,-1,-1,-1,        
        ],8,scale)
    }
}

function resize( pattern, w, multiply ){
    const dw = w * multiply
    return new Array( pattern.length * multiply * multiply ).fill(0).map( (_, idx ) => {
        const dj = Math.floor( idx / dw )
        const di = idx % dw
        const sline = Math.floor( dj / multiply )
        const scol =  Math.floor( di / multiply )
        const c = pattern[ sline * w + scol ]
        return c
    })
}
export const bonusessym12 = [
    mkRotatingBonusAnimation( AnimatedBonusTemplates.rotatingSquare8, [ 1, 1, 1, 1, 2, 2 ] ),
    mkRotatingBonusAnimation( AnimatedBonusTemplates.rotatingCross8, [ 1, 1, 1, 2, 2, 2 ] )
]
/*
const pat = [0,1,0,2]
console.log( show( pat, 2 ) )
const resized2 = resize( pat, 2, 2)
console.log( show( resized2, 4) )
const resized3 = resize( pat, 2, 3 )
console.log( show( resized3, 6 ) )
*/

/*
bonusessym12.forEach( (bonusAnim,idx) => {
    console.log( idx, bonusAnim )
    bonusAnim.forEach( step  =>  {
        const { w, pixel12 } = step
        console.log( show( pixel12, w ) )
    })
})


*/
